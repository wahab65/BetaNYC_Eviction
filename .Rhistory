label = "Scroll to select your dates",
timeFormat="%Y-%m",
min = as.Date(min(data$my_dates)),
max = as.Date(max(data$my_dates)),
value = c(as.Date("2018-02-01"),as.Date("2020-01-01"))
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "mapPlot"),
DT::dataTableOutput("table")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
#filter_cases = zipcode_cases %>%
#  filter(date >= input$inputDate[1] & date <= input$inputDate[2])  %>%
# group_by(zipcode)  %>%
#summarize(count = sum(totaleviction))
output$distPlot <- renderPlot({
getEvinction(input$inputDate[1], input$inputDate[2], input$city)
})
output$mapPlot <- renderPlot({
getEvinctionMap(input$inputDate[1], input$inputDate[2])
})
output$table <- DT::renderDataTable(datatable({
datas = getEvinctionTable(input$inputDate[1], input$inputDate[2])
#if(input$zipcodeId != ""){
#  datas <- output[datas$ZipCode == input$zipcodeId]
#}
}))
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
zipcode_case
zipcode_case
sample(zipcode_cases)
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
View(zipcode_cases)
sample(zipcode_cases)
data= read.csv("./weekly_202203070957.csv")
data$my_dates = as.Date(data$`day`, '%Y-%m-%d')
#~/Desktop/betaNYC/ZIP_CODE_040114
#Reads in anotger dataset that has zipcodes and latitude, longitude information
zipcode_polygons = st_read("~/Desktop/betaNYC/ZIP_CODE_040114/ZIP_CODE_040114.shp")  %>%
select(ZIPCODE, geometry, POPULATION)
#Reads in another dataset that has only zipcodes, count by zipcodes of the eviction table.
cases = read.csv("./UPDATES_CASES.csv")%>%
mutate(date = as.Date(filedate, format = "%Y-%m-%d"), zipcode = substr(zipcode, 0, 5))
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
#Get healthdata set from github
urlfile = ("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv")
health_data <- read.csv(url(urlfile))
neigborhouds = health_data %>%
select(modzcta, modzcta_name)
colnames(neigborhouds)[1] <- "ZipCode"
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
sample(zipcode_cases)
getEvinctionTable = function(startDate, endDate){
filtered_cases = cases %>%
filter(date >= startDate & date <= endDate)  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
tables_output = neigborhouds %>%
merge(filtered_cases, by.x = "ZipCode", by.y = "zipcode") %>%
arrange(desc(count))
}
#create a function that maps the evictions
getEvinctionMap = function(startDate, endDate){
#creates a dataframe between the given date range and also groups them by zipcode and and sums up the evictions
#filter_cases = zipcode_cases %>%
#  filter(date >= startDate & date <= endDate)  %>%
#  group_by(zipcode)  %>%
#  summarize(count = sum(totaleviction))
#joins both the zipcode dataset and the eviction dataset
#zipcode_cases = zipcode_polygons  %>%
#  merge(filter_cases, by.x = "ZIPCODE", by.y = "zipcode")
#creates a map
outputCases <- zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
return (ggplot() +
geom_sf(data = outputCases,
aes(fill = count), size = 0.2) +
scale_fill_continuous(low="yellow", high="red",
name = paste("Evinctions by Zipcode between", startDate, " and ", endDate)) +
coord_sf(crs = "EPSG:2263",
default_crs = "EPSG:4326") +
theme_void())
}
filter_cases = cases %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
neigborhouds = health_data %>%
select(modzcta, modzcta_name)
colnames(neigborhouds)[1] <- "ZipCode"
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
sample(zipcode_cases)
getEvinctionTable = function(startDate, endDate){
filtered_cases = cases %>%
filter(date >= startDate & date <= endDate)  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
tables_output = neigborhouds %>%
merge(filtered_cases, by.x = "ZipCode", by.y = "zipcode") %>%
arrange(desc(count))
}
#create a function that maps the evictions
getEvinctionMap = function(startDate, endDate){
#creates a dataframe between the given date range and also groups them by zipcode and and sums up the evictions
#filter_cases = zipcode_cases %>%
#  filter(date >= startDate & date <= endDate)  %>%
#  group_by(zipcode)  %>%
#  summarize(count = sum(totaleviction))
#joins both the zipcode dataset and the eviction dataset
#zipcode_cases = zipcode_polygons  %>%
#  merge(filter_cases, by.x = "ZIPCODE", by.y = "zipcode")
#creates a map
outputCases <- zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
return (ggplot() +
geom_sf(data = outputCases,
aes(fill = count), size = 0.2) +
scale_fill_continuous(low="yellow", high="red",
name = paste("Evinctions by Zipcode between", startDate, " and ", endDate)) +
coord_sf(crs = "EPSG:2263",
default_crs = "EPSG:4326") +
theme_void())
}
getEvinction = function(startDate, endDate, borough){
data %>%
select(my_dates, active_cases, cases_filed, city) %>%
filter(my_dates > startDate & my_dates <endDate & city == borough) %>%
ggplot(aes(x= my_dates, group =1)) +
geom_line(aes(y = active_cases), color = "red") +
geom_line(aes(y = cases_filed), color="steelblue")  +
scale_x_date(date_breaks = '4 month', guide = guide_axis(n.dodge = 2), date_labels = "%m-%y")
}
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Eviction in New York City!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "city",
label = "Choose a County",
choices = c("New York", "Brooklyn"),
plotOutput("distPlot")),
sliderInput(inputId = "inputDate",
label = "Scroll to select your dates",
timeFormat="%Y-%m",
min = as.Date(min(data$my_dates)),
max = as.Date(max(data$my_dates)),
value = c(as.Date("2018-02-01"),as.Date("2020-01-01"))
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "mapPlot"),
DT::dataTableOutput("table")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
#filter_cases = zipcode_cases %>%
#  filter(date >= input$inputDate[1] & date <= input$inputDate[2])  %>%
# group_by(zipcode)  %>%
#summarize(count = sum(totaleviction))
output$distPlot <- renderPlot({
getEvinction(input$inputDate[1], input$inputDate[2], input$city)
})
output$mapPlot <- renderPlot({
getEvinctionMap(input$inputDate[1], input$inputDate[2])
})
output$table <- DT::renderDataTable(datatable({
datas = getEvinctionTable(input$inputDate[1], input$inputDate[2])
#if(input$zipcodeId != ""){
#  datas <- output[datas$ZipCode == input$zipcodeId]
#}
}))
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
View(zipcode_cases)
#create a function that maps the evictions
getEvinctionMap = function(startDate, endDate){
#creates a dataframe between the given date range and also groups them by zipcode and and sums up the evictions
#filter_cases = zipcode_cases %>%
#  filter(date >= startDate & date <= endDate)  %>%
#  group_by(zipcode)  %>%
#  summarize(count = sum(totaleviction))
#joins both the zipcode dataset and the eviction dataset
#zipcode_cases = zipcode_polygons  %>%
#  merge(filter_cases, by.x = "ZIPCODE", by.y = "zipcode")
#creates a map
outputCases <- zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(ZIPCODE)  %>%
summarize(count = sum(totaleviction))
return (ggplot() +
geom_sf(data = outputCases,
aes(fill = count), size = 0.2) +
scale_fill_continuous(low="yellow", high="red",
name = paste("Evinctions by Zipcode between", startDate, " and ", endDate)) +
coord_sf(crs = "EPSG:2263",
default_crs = "EPSG:4326") +
theme_void())
}
getEvinction = function(startDate, endDate, borough){
data %>%
select(my_dates, active_cases, cases_filed, city) %>%
filter(my_dates > startDate & my_dates <endDate & city == borough) %>%
ggplot(aes(x= my_dates, group =1)) +
geom_line(aes(y = active_cases), color = "red") +
geom_line(aes(y = cases_filed), color="steelblue")  +
scale_x_date(date_breaks = '4 month', guide = guide_axis(n.dodge = 2), date_labels = "%m-%y")
}
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Eviction in New York City!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "city",
label = "Choose a County",
choices = c("New York", "Brooklyn"),
plotOutput("distPlot")),
sliderInput(inputId = "inputDate",
label = "Scroll to select your dates",
timeFormat="%Y-%m",
min = as.Date(min(data$my_dates)),
max = as.Date(max(data$my_dates)),
value = c(as.Date("2018-02-01"),as.Date("2020-01-01"))
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "mapPlot"),
DT::dataTableOutput("table")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
#filter_cases = zipcode_cases %>%
#  filter(date >= input$inputDate[1] & date <= input$inputDate[2])  %>%
# group_by(zipcode)  %>%
#summarize(count = sum(totaleviction))
output$distPlot <- renderPlot({
getEvinction(input$inputDate[1], input$inputDate[2], input$city)
})
output$mapPlot <- renderPlot({
getEvinctionMap(input$inputDate[1], input$inputDate[2])
})
output$table <- DT::renderDataTable(datatable({
datas = getEvinctionTable(input$inputDate[1], input$inputDate[2])
#if(input$zipcodeId != ""){
#  datas <- output[datas$ZipCode == input$zipcodeId]
#}
}))
}
#Get healthdata set from github
urlfile = ("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv")
health_data <- read.csv(url(urlfile))
neigborhouds = health_data %>%
select(modzcta, modzcta_name)
colnames(neigborhouds)[1] <- "ZipCode"
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
sample(zipcode_cases)
#~/Desktop/betaNYC/ZIP_CODE_040114
#Reads in anotger dataset that has zipcodes and latitude, longitude information
zipcode_polygons = st_read("~/Desktop/betaNYC/ZIP_CODE_040114/ZIP_CODE_040114.shp")  %>%
select(ZIPCODE, geometry, POPULATION)
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
#Get healthdata set from github
urlfile = ("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv")
health_data <- read.csv(url(urlfile))
neigborhouds = health_data %>%
select(modzcta, modzcta_name)
colnames(neigborhouds)[1] <- "ZipCode"
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
sample(zipcode_cases)
getEvinctionTable = function(startDate, endDate){
filtered_cases = cases %>%
filter(date >= startDate & date <= endDate)  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
tables_output = neigborhouds %>%
merge(filtered_cases, by.x = "ZipCode", by.y = "zipcode") %>%
arrange(desc(count))
}
#create a function that maps the evictions
getEvinctionMap = function(startDate, endDate){
#creates a dataframe between the given date range and also groups them by zipcode and and sums up the evictions
#filter_cases = zipcode_cases %>%
#  filter(date >= startDate & date <= endDate)  %>%
#  group_by(zipcode)  %>%
#  summarize(count = sum(totaleviction))
#joins both the zipcode dataset and the eviction dataset
#zipcode_cases = zipcode_polygons  %>%
#  merge(filter_cases, by.x = "ZIPCODE", by.y = "zipcode")
#creates a map
outputCases <- zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(ZIPCODE)  %>%
summarize(count = sum(totaleviction))
return (ggplot() +
geom_sf(data = outputCases,
aes(fill = count), size = 0.2) +
scale_fill_continuous(low="yellow", high="red",
name = paste("Evinctions by Zipcode between", startDate, " and ", endDate)) +
coord_sf(crs = "EPSG:2263",
default_crs = "EPSG:4326") +
theme_void())
}
getEvinction = function(startDate, endDate, borough){
data %>%
select(my_dates, active_cases, cases_filed, city) %>%
filter(my_dates > startDate & my_dates <endDate & city == borough) %>%
ggplot(aes(x= my_dates, group =1)) +
geom_line(aes(y = active_cases), color = "red") +
geom_line(aes(y = cases_filed), color="steelblue")  +
scale_x_date(date_breaks = '4 month', guide = guide_axis(n.dodge = 2), date_labels = "%m-%y")
}
getEvinction = function(startDate, endDate, borough){
data %>%
select(my_dates, active_cases, cases_filed, city) %>%
filter(my_dates > startDate & my_dates <endDate & city == borough) %>%
ggplot(aes(x= my_dates, group =1)) +
geom_line(aes(y = active_cases), color = "red") +
geom_line(aes(y = cases_filed), color="steelblue")  +
scale_x_date(date_breaks = '4 month', guide = guide_axis(n.dodge = 2), date_labels = "%m-%y")
}
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Eviction in New York City!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "city",
label = "Choose a County",
choices = c("New York", "Brooklyn"),
plotOutput("distPlot")),
sliderInput(inputId = "inputDate",
label = "Scroll to select your dates",
timeFormat="%Y-%m",
min = as.Date(min(data$my_dates)),
max = as.Date(max(data$my_dates)),
value = c(as.Date("2018-02-01"),as.Date("2020-01-01"))
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "mapPlot"),
DT::dataTableOutput("table")
)
)
)
data= read.csv("./weekly_202203070957.csv")
data$my_dates = as.Date(data$`day`, '%Y-%m-%d')
#~/Desktop/betaNYC/ZIP_CODE_040114
#Reads in anotger dataset that has zipcodes and latitude, longitude information
zipcode_polygons = st_read("~/Desktop/betaNYC/ZIP_CODE_040114/ZIP_CODE_040114.shp")  %>%
select(ZIPCODE, geometry, POPULATION)
#Reads in another dataset that has only zipcodes, count by zipcodes of the eviction table.
cases = read.csv("./UPDATES_CASES.csv")%>%
mutate(date = as.Date(filedate, format = "%Y-%m-%d"), zipcode = substr(zipcode, 0, 5))
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
#merge zipcodes and the cases table
zipcode_cases = zipcode_polygons  %>%
merge(cases, by.x = "ZIPCODE", by.y = "zipcode")
#Get healthdata set from github
urlfile = ("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv")
#Get healthdata set from github
urlfile = ("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/last7days-by-modzcta.csv")
health_data <- read.csv(url(urlfile))
neigborhouds = health_data %>%
select(modzcta, modzcta_name)
colnames(neigborhouds)[1] <- "ZipCode"
neigborhouds$Location = paste(neigborhouds$ZipCode,neigborhouds$modzcta_name, sep = "<br/>")
sample(zipcode_cases)
getEvinctionTable = function(startDate, endDate){
filtered_cases = cases %>%
filter(date >= startDate & date <= endDate)  %>%
group_by(zipcode)  %>%
summarize(count = sum(totaleviction))
tables_output = neigborhouds %>%
merge(filtered_cases, by.x = "ZipCode", by.y = "zipcode") %>%
arrange(desc(count))
}
#create a function that maps the evictions
getEvinctionMap = function(startDate, endDate){
#creates a dataframe between the given date range and also groups them by zipcode and and sums up the evictions
#filter_cases = zipcode_cases %>%
#  filter(date >= startDate & date <= endDate)  %>%
#  group_by(zipcode)  %>%
#  summarize(count = sum(totaleviction))
#joins both the zipcode dataset and the eviction dataset
#zipcode_cases = zipcode_polygons  %>%
#  merge(filter_cases, by.x = "ZIPCODE", by.y = "zipcode")
#creates a map
outputCases <- zipcode_cases %>%
filter(date >= "2018-02-01" & date <= "2020-02-01")  %>%
group_by(ZIPCODE)  %>%
summarize(count = sum(totaleviction))
return (ggplot() +
geom_sf(data = outputCases,
aes(fill = count), size = 0.2) +
scale_fill_continuous(low="yellow", high="red",
name = paste("Evinctions by Zipcode between", startDate, " and ", endDate)) +
coord_sf(crs = "EPSG:2263",
default_crs = "EPSG:4326") +
theme_void())
}
getEvinction = function(startDate, endDate, borough){
data %>%
select(my_dates, active_cases, cases_filed, city) %>%
filter(my_dates > startDate & my_dates <endDate & city == borough) %>%
ggplot(aes(x= my_dates, group =1)) +
geom_line(aes(y = active_cases), color = "red") +
geom_line(aes(y = cases_filed), color="steelblue")  +
scale_x_date(date_breaks = '4 month', guide = guide_axis(n.dodge = 2), date_labels = "%m-%y")
}
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Eviction in New York City!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "city",
label = "Choose a County",
choices = c("New York", "Brooklyn"),
plotOutput("distPlot")),
sliderInput(inputId = "inputDate",
label = "Scroll to select your dates",
timeFormat="%Y-%m",
min = as.Date(min(data$my_dates)),
max = as.Date(max(data$my_dates)),
value = c(as.Date("2018-02-01"),as.Date("2020-01-01"))
)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
plotOutput(outputId = "mapPlot"),
DT::dataTableOutput("table")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
#filter_cases = zipcode_cases %>%
#  filter(date >= input$inputDate[1] & date <= input$inputDate[2])  %>%
# group_by(zipcode)  %>%
#summarize(count = sum(totaleviction))
output$distPlot <- renderPlot({
getEvinction(input$inputDate[1], input$inputDate[2], input$city)
})
output$mapPlot <- renderPlot({
getEvinctionMap(input$inputDate[1], input$inputDate[2])
})
output$table <- DT::renderDataTable(datatable({
datas = getEvinctionTable(input$inputDate[1], input$inputDate[2])
#if(input$zipcodeId != ""){
#  datas <- output[datas$ZipCode == input$zipcodeId]
#}
}))
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
